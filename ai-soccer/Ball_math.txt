SoccerBall:

	Используются векторные величины и их вычисления, это значительно облегчило вычисление положения игрока.
	Не надо выполнять тригонометрических вычислений.
	
	Для рендеринга мяча каждый такт используется вектор position.
 
	Положение мяча обновляется каждый такт:
	update() {
		if (velocity.lengthSq() > ParamLoader.getInstance().Friction * ParamLoader.getInstance().Friction) {
			velocity.add(velocity.normalizen().muln(ParamLoader.getInstance().Friction));
			position.add(velocity);
			heading = velocity.normalizen();
		}
	}		
	
	velocity, position, heading - векторы класса Vector
	Friction = -0.015 - здесь это фактически величина замедления скорости за такт.
	heading - направление движения, используется для разворота агента по направлению движения. 
			  Мяч круглый и его не надо разворачивать, поэтому heading не используется.
	Псевдокод:
		if (|velocity|*|velocity| > Friction*Friction) {
			velocity = velocity + (velocity/|velocity|) * Friction
			position = position + velocity
			heading = velocity/|velocity| - не используется для мяча, можно убрать
		}
	
	Данное условие некорректно. Если velocity>0 и <Friction мяч никогда не остановится. 
	!!! Но это допущение значительно облегчает вычисления и перемещение настолько ничтожно, что оно не видно глазом
		и потому его можно пренебречь.
	
	--- Вычисления крайне примитивны: V = V - Friction каждый такт. 
		Не учитывается вертуальное время такта. И если изменить частоту тактов, то надо автоматически менять и Friction.
		А надо V = V - Friction/t.
	
	Кроме того используется отрицат. Friction, поэтому V = V + Friction. 
	А надо для ясности положит. Friction и V = V - Friction, но это каким-то непонятным образом заставляет игроков бежать неправильно,
	хотя они не используют Friction. Почему?
	
	Вектор velocity мяча задаётся после удара:
		kick(Vector direction, double force) {
			direction.normalize();
			//acceleration = direction*force/mass
			Vector acceleration = direction.muln(force).div(mass);
			velocity = acceleration; -  начальная скорость мяча пропорциональна начальному ускорению мяча при ударе, 
										и т.к. время ускорения ничтожног мало, поэтому такое равенство допустимо.
		}
	Псевдокод :
		velocity = direction/|direction| * force / mass
		
	mass = 1.0 - константа
	direction - вектор направления удара
	force - производная константа:
		- для удара по воротам (KickBall.java): force = MaxShootingForce * dot; (MaxShootingForce = 6.0)
			dot- скалярное произведение векторов направления движения игрока и вектора движения мяча к игроку(до удара)
			double dot = player.getHeading().dot(toBall.normalize()); 
			Чем ближе вектора, тем сильнее удар.
		- для паса (KickBall.java): force = MaxForce * dot; (MaxPassingForce = 3.0)
		- для дриблинга (Dribble.java): 
			если не надо разворачиваться на >(Pi/4) по направлению движения: force = MaxDribbleForce; (MaxDribbleForce = 1.5) 
			если надо разворачиваться force = 0.8 (final double KickingForce = 0.8; в коде - надо вынести в параметры)
			
	!!! Идея умножения силы удара на скаляр разницы векторов движения игрока и направления мяча великолепна.
	!!! Очень проста и хорошо реализована идея проталкивания мяча при беге вперед и развороте (названа дриблингом).
	---	Данная система пасов и ударов не рассматривает дистанцию удара и паса и пас на 2 метра и 50 метров выполняется
		с одинаковой силой, а сл-но одинаковой начальной скоростью мяча. Это выглядит крайне неправдоподобно.
		Надо ввести коэффициент силы удара, учитывающий дистанцию до цели. Подобная система реализована в моём симе.
	

	